pval.train.mat = NULL
pval.test.mat = NULL
for (ds in datasetting){
ci.train.5 = NULL
ci.test.5 = NULL
pval.train.5 = NULL
pval.test.5 = NULL
f = dir(ds)
f = f[grep("fold_1", f)]
str = read_file(paste0(ds, "/", f,"/mainlog.log"))
str = strsplit(str, "\n")
str = str[[1]][sapply(str, function(x) grepl("Final", x))]
for (i in 1:length(str)){
values = regmatches(str[i],gregexpr("[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?",str[i]))[[1]]
if (i%%2 == 1){
ci.train.5 = as.numeric(c(ci.train.5, values[1]))
pval.train.5 = as.numeric(c(pval.train.5, values[2]))
} else {
ci.test.5 = as.numeric(c(ci.test.5, values[1]))
pval.test.5 = as.numeric(c(pval.test.5, values[2]))
}
}
ci.train.mat = cbind(ci.train.mat, ci.train.5)
ci.test.mat = cbind(ci.test.mat, ci.test.5)
pval.train.mat = cbind(pval.train.mat, pval.train.5)
pval.test.mat = cbind(pval.test.mat, pval.test.5)
}
colnames(ci.train.mat) = datasetting
colnames(ci.test.mat) = datasetting
colnames(pval.train.mat) = datasetting
colnames(pval.test.mat) = datasetting
colMeans(as.matrix(ci.train.mat), na.rm = T)
colMeans(as.matrix(ci.test.mat), na.rm = T)
colMeans(as.matrix(pval.train.mat), na.rm = T)
colMeans(as.matrix(pval.test.mat), na.rm = T)
colnames(ci.test.mat) = c("mRNA","miRNA", "mRNA+miRNA", "mRNA+miRNA+CNB+TMB","mRNA+miRNA+Age+Gender","mRNA+miRNA+CNB+TMB+Age+Gender")
# ci.test.mat = ci.test.mat[,1:4]
# boxplot(ci.test.mat)
p1 <- ggplot(melt(ci.test.mat), aes(x=Var2, y=value, fill = Var2)) +
# geom_violin(trim=T) +
geom_boxplot(width=0.2, color="black", size = 0.7, outlier.shape = 21) +
# geom_jitter(shape=16, position=position_jitter(0.2)) +
# stat_summary(fun.y=mean, geom="pointrange", color="red") +
theme_bw() +
scale_y_continuous(limits = c(0.40, 0.88)) +
labs(title = "(A) Performances of SALMON by Integrating Multi-omics Data",
x = "", y = "Concordance Index", fill = "Datasets") +
theme(axis.text.x=element_blank(),
# axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size=14, face="bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position="bottom"
) +
scale_fill_brewer(palette="Set2") +
# annotate("text", x = 1:6, y = rep(0.525,6), label = rep("Mean", 6)) +
annotate("point", color = "blue", x = 1:dim(ci.test.mat)[2], y = apply(ci.test.mat, 2, median)) +
annotate("line", color = "blue", x = 1:dim(ci.test.mat)[2], y = apply(ci.test.mat, 2, median)) +
# annotate("text", color = "black", x = 1:dim(ci.test.mat)[2], y = 0.58, label = rep("Mean",dim(ci.test.mat)[2])) +
annotate("text", color = "black", x = 1:dim(ci.test.mat)[2], y = 0.64, label = sprintf("Mean: %.4f", colMeans(ci.test.mat))) +
annotate("text", color = "blue", x = 1:dim(ci.test.mat)[2], y = apply(ci.test.mat, 2, median)+0.02, label = sprintf("Median: %.4f", apply(ci.test.mat, 2, median)))
p1
ggsave("performance_boxplot.png", plot = p1,
scale = 1, width = 10, height = 5, units = "in",
dpi = 300)
################## pairwise paired t-test
# pair-wised pair t-test: CI
pw.pttest.t = matrix(nrow = dim(ci.test.mat)[2], ncol = dim(ci.test.mat)[2])
pw.pttest.pval = matrix(nrow = dim(ci.test.mat)[2], ncol = dim(ci.test.mat)[2])
colnames(pw.pttest.t) = colnames(ci.test.mat)
rownames(pw.pttest.t) = colnames(ci.test.mat)
colnames(pw.pttest.pval) = colnames(ci.test.mat)
rownames(pw.pttest.pval) = colnames(ci.test.mat)
for(i in 1:dim(ci.test.mat)[2]){
for(j in 1:dim(ci.test.mat)[2]){
res = t.test(ci.test.mat[,i], ci.test.mat[,j], paired=T, conf.level=0.95)
pw.pttest.t[i,j] = res$statistic
pw.pttest.pval[i,j] = res$p.value
}
}
write.table(pw.pttest.t, "pw.pttest.t.csv", sep = ",", col.names = NA)
write.table(pw.pttest.pval, "pw.pttest.pval.csv", sep = ",", col.names = NA)
####################################
# Analyse network weights
####################################
workdir.feature.weight = "/home/zhihuan/Documents/SALMON/experiments/Results/LUAD/7_RNAseq+miRNAseq+cnb+tmb+clinical"
setwd(workdir.feature.weight)
Sys.sleep(1)
folds = dir(".")[grepl("run_", dir("."))]
feature_corresponding_CI = data.frame(matrix(0, ncol = 75, nrow = 5))
for (i in 1:length(folds)){
original_CI = read.table(paste0(folds[i], "/leave_one_out_CIndex.txt"), nrows=1)$V6
text = read.table(paste0(folds[i], "/leave_one_out_CIndex.txt"), skip = 1)
feature_names = str_remove_all(text$V5, ',')
feature_corresponding_CI[i,] = text[,8] - original_CI
}
# feature_corresponding_CI = feature_corresponding_CI[,1:74]
feature.median = apply(feature_corresponding_CI, 2, median)
feature.max = apply(feature_corresponding_CI, 2, max)
feature.order = sort.int(feature.median, index.return = T, decreasing = F)$ix
feature.median.ordered = feature.median[feature.order]
feature_corresponding_CI = cbind(c("fold 1", "fold 2", "fold 3", "fold 4", "fold 5"), feature_corresponding_CI)
colnames(feature_corresponding_CI) = c("fold", rep(1:75))
feature_corresponding_CI.m = melt(feature_corresponding_CI)
feature.color = c(rep("yellowgreen", 58), rep("red",13), rep("turquoise",2),rep("pink",2))[feature.order]
feature.color = feature.color[1:(dim(feature_corresponding_CI)[2]-1)]
p3 <- ggplot(feature_corresponding_CI.m, aes(x = factor(variable, levels = feature.order[1:(dim(feature_corresponding_CI)[2]-1)]),
y = value, fill = variable)) +
geom_boxplot(width=0.6, fill = feature.color, color="black", size = 0.6, outlier.shape = NA) +
labs(title = "Feature Importance from SALMON (LUAD)",
x = "Feature IDs", y = "Concordance Index Decreased", fill = "Methods") +
theme(axis.text.x = element_text(angle = 0, hjust = 1, size = 9),
axis.text = element_text(size = 12),
plot.title = element_text(size=14, face="bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.position = c(0.9, 0.2)) +
ylim(-0.04, 0.02) +
annotate("text", angle=90, x = 1:length(feature.median.ordered), y = feature.median.ordered+0.005,
color = "red", label = sprintf("%.4f", feature.median.ordered)) +
annotate("rect", fill = "white", xmin = 49.5, xmax = 70.5, ymin = -0.015, ymax = -0.032, alpha = .8)+
annotate("text", color = "black", size = 5, x = 60, y = -0.018, label = "Boxplot Colors") +
annotate("rect", fill = "yellowgreen", xmin = 50, xmax = 70, ymin = -0.02, ymax = -0.022, alpha = .8)+
annotate("text", color = "black", x = 60, y = -0.021, label = "58 mRNA-seq coexpression modules (ID 1-58)") +
annotate("rect", fill = "red", xmin = 50, xmax = 70, ymin = -0.023, ymax = -0.025, alpha = .8)+
annotate("text", color = "white", x = 60, y = -0.024, label = "13 miRNA-seq coexpression modules (ID 59-71)") +
annotate("rect", fill = "turquoise", xmin = 50, xmax = 70, ymin = -0.026, ymax = -0.028, alpha = .8)+
annotate("text", color = "black", x = 60, y = -0.027, label = "CNB and TMB Features (ID 72-73)") +
annotate("rect", fill = "pink", xmin = 50, xmax = 70, ymin = -0.029, ymax = -0.031, alpha = .8)+
annotate("text", color = "black", x = 60, y = -0.030, label = "Gender, age (ID 74-75)")
p3
ggsave("feature_importance.png", plot = p3,
scale = 1, width = 15, height = 8, units = "in",
dpi = 300)
################
# KM plots
################
workdir = paste0(analyses_dir, '/../../Results/LUAD/')
setwd(workdir)
library(survival)
library(survminer)
library(reticulate)
use_python("/home/zhihuan/anaconda3/bin/python")
py_load_object <- function(filename, pickle = "pickle") {
builtins <- import_builtins()
pickle <- import(pickle)
handle <- builtins$open(filename, "rb")
on.exit(handle$close(), add = TRUE)
pickle$load(handle)
}
# log-ranked p-value
logrankp <- function(res, OS, OS.Status, title, fname){
mv = median(res)
group = cbind(length(OS))
for(j in 1:length(OS)){
if(res[j] < mv){
group[j] = 1
}else{
group[j] = 2
}
}
mySurvTest = Surv(OS, OS.Status)
# logrank
log1 = survdiff(mySurvTest ~ group)
logrank.p = pchisq(log1$chisq, 1, lower.tail=FALSE)
# KM Curve
fit = survfit(mySurvTest ~ group)
n1 = sum(group==1)
leg1 = paste("Low risk (", n1, ")", sep = "")
n2 = sum(group==2)
leg2 = paste("High risk (", n2, ")", sep = "")
png(filename = fname,
width = 7, height = 6.5,
units = "cm", res = 300, pointsize = 7)
plot(fit, mark.time=TRUE, lty = 1:2,
col = 1:2, cex = 0.5)
title(main = title, xlab = "Months", ylab = "Survival", mgp=c(2,2,0))
grid()
legend(x = "topright", legend = c(leg1, leg2), lty = 1:2,
col = 1:2, cex = 0.65)
text(10, 0.1, paste("p=", formatC(logrank.p, format="g", digits = 4), sep = ""),
pos = 4, cex = 1)
p <- recordPlot()
dev.off()
return(p)
}
datasets = dir(".")[grepl("RNAseq", dir(".")) | grepl("tmb", dir("."))]#[1:5]
titles = c("(A) mRNA","(B) miRNA","(C) mRNA+miRNA","(D) mRNA+miRNA+CNB+TMB",
"(E) mRNA+miRNA+Gender+Age","(F) CNB+TMB+Gender+Age","(G) mRNA+miRNA+CNB+TMB+Gender+Age")
kmplots = NULL
for (ds in 1:length(datasets)){
folds = dir(datasets[ds])[grepl("run_", dir(datasets[ds]))]
hr.all = NULL
e.all = NULL
t.all = NULL
for (i in 1:length(folds)){
hr = read.csv(paste0(datasets[ds],"/",folds[i], "/hazard_ratios_lbl_pred_all_test.csv"), row.names = 1)$X0
e = read.csv(paste0(datasets[ds],"/",folds[i], "/OS_event_test.csv"), row.names = 1)$X0
t = read.csv(paste0(datasets[ds],"/",folds[i], "/OS_test.csv"), row.names = 1)$X0
hr.all = c(hr.all, hr)
e.all = c(e.all, e)
t.all = c(t.all, t)
}
fname = paste0(workdir,"kmcurve_testing/KMCurve_",ds,".png")
logrankp(hr.all, t.all, e.all, titles[ds], fname)
}
# log-ranked p-value
logrankp <- function(res, OS, OS.Status, title, fname){
mv = median(res)
group = cbind(length(OS))
for(j in 1:length(OS)){
if(res[j] < mv){
group[j] = 1
}else{
group[j] = 2
}
}
mySurvTest = Surv(OS, OS.Status)
# logrank
log1 = survdiff(mySurvTest ~ group)
logrank.p = pchisq(log1$chisq, 1, lower.tail=FALSE)
# KM Curve
fit = survfit(mySurvTest ~ group)
n1 = sum(group==1)
leg1 = paste("Low risk (", n1, ")", sep = "")
n2 = sum(group==2)
leg2 = paste("High risk (", n2, ")", sep = "")
png(filename = fname,
width = 7, height = 6.5,
units = "cm", res = 300, pointsize = 7)
plot(fit, mark.time=TRUE, lty = 1:2,
col = 1:2, cex = 0.5)
title(main = title, xlab = "Days", ylab = "Survival", mgp=c(2,2,0))
grid()
legend(x = "topright", legend = c(leg1, leg2), lty = 1:2,
col = 1:2, cex = 0.65)
text(10, 0.1, paste("p=", formatC(logrank.p, format="g", digits = 4), sep = ""),
pos = 4, cex = 1)
p <- recordPlot()
dev.off()
return(p)
}
datasets = dir(".")[grepl("RNAseq", dir(".")) | grepl("tmb", dir("."))]#[1:5]
titles = c("(A) mRNA","(B) miRNA","(C) mRNA+miRNA","(D) mRNA+miRNA+CNB+TMB",
"(E) mRNA+miRNA+Gender+Age","(F) CNB+TMB+Gender+Age","(G) mRNA+miRNA+CNB+TMB+Gender+Age")
datasets = dir(".")[grepl("RNAseq", dir("."))
titles = c("(A) mRNA","(B) miRNA","(C) mRNA+miRNA","(D) mRNA+miRNA+CNB+TMB",
"(E) mRNA+miRNA+Gender+Age","(F) mRNA+miRNA+CNB+TMB+Gender+Age")
kmplots = NULL
for (ds in 1:length(datasets)){
folds = dir(datasets[ds])[grepl("run_", dir(datasets[ds]))]
hr.all = NULL
e.all = NULL
t.all = NULL
for (i in 1:length(folds)){
hr = read.csv(paste0(datasets[ds],"/",folds[i], "/hazard_ratios_lbl_pred_all_test.csv"), row.names = 1)$X0
e = read.csv(paste0(datasets[ds],"/",folds[i], "/OS_event_test.csv"), row.names = 1)$X0
t = read.csv(paste0(datasets[ds],"/",folds[i], "/OS_test.csv"), row.names = 1)$X0
hr.all = c(hr.all, hr)
e.all = c(e.all, e)
t.all = c(t.all, t)
}
fname = paste0(workdir,"kmcurve_testing/KMCurve_",ds,".png")
logrankp(hr.all, t.all, e.all, titles[ds], fname)
}
datasets = dir(".")[grepl("RNAseq", dir("."))
titles = c("(A) mRNA","(B) miRNA","(C) mRNA+miRNA","(D) mRNA+miRNA+CNB+TMB",
"(E) mRNA+miRNA+Gender+Age","(F) mRNA+miRNA+CNB+TMB+Gender+Age")
kmplots = NULL
for (ds in 1:length(datasets)){
folds = dir(datasets[ds])[grepl("run_", dir(datasets[ds]))]
hr.all = NULL
e.all = NULL
t.all = NULL
for (i in 1:length(folds)){
hr = read.csv(paste0(datasets[ds],"/",folds[i], "/hazard_ratios_lbl_pred_all_test.csv"), row.names = 1)$X0
e = read.csv(paste0(datasets[ds],"/",folds[i], "/OS_event_test.csv"), row.names = 1)$X0
t = read.csv(paste0(datasets[ds],"/",folds[i], "/OS_test.csv"), row.names = 1)$X0
hr.all = c(hr.all, hr)
e.all = c(e.all, e)
t.all = c(t.all, t)
}
fname = paste0(workdir,"kmcurve_testing/KMCurve_",ds,".png")
logrankp(hr.all, t.all, e.all, titles[ds], fname)
}
datasets
dir(".")
datasets = dir(".")[grepl("RNAseq", dir("."))]
datasets
datasets = dir(".")[grepl("RNAseq", dir("."))]
titles = c("(A) mRNA","(B) miRNA","(C) mRNA+miRNA","(D) mRNA+miRNA+CNB+TMB",
"(E) mRNA+miRNA+Gender+Age","(F) mRNA+miRNA+CNB+TMB+Gender+Age")
kmplots = NULL
for (ds in 1:length(datasets)){
folds = dir(datasets[ds])[grepl("run_", dir(datasets[ds]))]
hr.all = NULL
e.all = NULL
t.all = NULL
for (i in 1:length(folds)){
hr = read.csv(paste0(datasets[ds],"/",folds[i], "/hazard_ratios_lbl_pred_all_test.csv"), row.names = 1)$X0
e = read.csv(paste0(datasets[ds],"/",folds[i], "/OS_event_test.csv"), row.names = 1)$X0
t = read.csv(paste0(datasets[ds],"/",folds[i], "/OS_test.csv"), row.names = 1)$X0
hr.all = c(hr.all, hr)
e.all = c(e.all, e)
t.all = c(t.all, t)
}
fname = paste0(workdir,"kmcurve_testing/KMCurve_",ds,".png")
logrankp(hr.all, t.all, e.all, titles[ds], fname)
}
library(lmQCM)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
options(stringsAsFactors = F)
dataset = {} # LUAD
########################################################################
#                      Clinical
########################################################################
dataset[['clinical']] = read.table('LUAD/clinical/nationwidechildrens.org_clinical_patient_luad.txt', header = T, sep = '\t')
dataset[['clinical']] = dataset[['clinical']][3:dim(dataset[['clinical']])[1],]
colnames(dataset[['clinical']])
head(dataset[['clinical']])
dataset[['clinical']]$age_at_initial_pathologic_diagnosis = strtoi(dataset[['clinical']]$age_at_initial_pathologic_diagnosis)
dataset[['clinical']]$last_contact_days_to = strtoi(dataset[['clinical']]$last_contact_days_to)
dataset[['clinical']]$death_days_to = strtoi(dataset[['clinical']]$death_days_to)
dataset[['clinical']]$tobacco_smoking_history_indicator = strtoi(dataset[['clinical']]$tobacco_smoking_history_indicator)
print('use valid \'death_days_to\' to replace \'last_contact_days_to\'')
# days_to_last_followup and days_to_death
dataset[['clinical']]$survival_days = dataset[['clinical']]$last_contact_days_to
dataset[['clinical']]$survival_days[!is.na(dataset[['clinical']]$death_days_to)] = dataset[['clinical']]$death_days_to[!is.na(dataset[['clinical']]$death_days_to)]
# extract useful columns
dataset[['clinical']] = dataset[['clinical']][, c('bcr_patient_barcode', 'gender','age_at_initial_pathologic_diagnosis', 'vital_status','survival_days')]
dataset[['clinical']] = dataset[['clinical']][complete.cases(dataset[['clinical']]),]
print(paste0('[clinical] ', dim(dataset[['clinical']])[1], ' complete rows found in clinical data.'))
########################################################################
#                      TMB
########################################################################
dataset[['TMB']] = read.table("LUAD/TMB/LUAD_TMB.csv", header = T, row.names = 1, sep = ",")
print(paste0('[TMB] ', dim(dataset[['TMB']])[1], ' complete rows found in clinical data.'))
########################################################################
#                      CNB
########################################################################
# Xiaohui Zhan:
# https://www.nature.com/articles/ng.3725
# a) For high quality CNVs ,the length of segmental region >20kb
#
# b) The number of probes spanning a CNV (a segmental region) to be
#    at least 10 to decrease false positives in calling CNVs.
#
# c) For a segmental region ,if the segment mean < |0.2|,this segmental
#    region should be discard.(Generally ,we using +/-0.2 as threshold
#    for a duplication/deletion. Because lots of noise will be introduced
#    from the microarray. The thresholds(+/- 0.2) were derived by examining
#    the distribution of segment mean values from tumor and normal samples)
SNP = read.table("LUAD/CNB/broad.mit.edu_PANCAN_Genome_Wide_SNP_6_whitelisted.seg", sep = "\t", header = T)
SNP$LENGTH = SNP$End - SNP$Start
SNP.filtered = SNP[(SNP$LENGTH >= 20000) &
(SNP$Num_Probes >= 10) &
(abs(SNP$Segment_Mean) >= 0.2),]
# SNP = read.table("data/UCSC Xena/broad.mit.edu_PANCAN_Genome_Wide_SNP_6_whitelisted.xena", sep = "\t", header = T)
SNP.filtered.sum = aggregate(SNP.filtered$LENGTH, by=list(Category=SNP.filtered$Sample), FUN=sum)
# 1Mb = 1,000 kb = 1,000,000 pb
SNP.filtered.sum$LENGTH_KB = SNP.filtered.sum$x/1000
# remove normal group 10A, 11A, ...
SNP.filtered.sum = SNP.filtered.sum[as.numeric(substr(SNP.filtered.sum$Category, 14, 15)) == 1, ] # only based on primary cancer (01A)
barcode = substr(SNP.filtered.sum$Category, 1, 12)
length(unique(barcode)) == length(barcode)
# samebarcode = names(table(barcode)[table(barcode)>=2])
# same = unlist(lapply(samebarcode, function(x) which(grepl(x, SNP.filtered.sum$Category))))
# SNP.filtered.sum$Category[same]
#### Get patients information
pinfo = read.table("LUAD/CNB/data/UCSC Xena/TCGA_phenotype_denseDataOnlyDownload.tsv", sep = "\t", header = T)
pinfo$barcode = substr(pinfo$sample, 1, 12)
SNP.filtered.sum$CANCER = pinfo$X_primary_disease[match(barcode, pinfo$barcode)]
study.abbr = read.table("LUAD/CNB/data/TCGA study abbreviations.tsv", sep = "\t", header = T)
study.abbr$Study.Name = tolower(study.abbr$Study.Name)
SNP.f2 = SNP.filtered.sum[SNP.filtered.sum$CANCER %in% study.abbr$Study.Name,]
SNP.f2$CANCER_ABBR = study.abbr$Study.Abbreviation[match(SNP.f2$CANCER, study.abbr$Study.Name)]
SNP.f3 = SNP.f2[SNP.f2$CANCER_ABBR %in% c("BLCA", "BRCA","CESC","HNSC","KIRC", "KIRP", "LIHC", "LUAD",
"LUSC", "OV", "PAAD","STAD"),]
table(SNP.f3$CANCER_ABBR)
dataset[['CNB']] = SNP.f3[SNP.f3$CANCER_ABBR == "LUAD",]
dataset[['CNB']] = data.frame(cbind(dataset[['CNB']]$Category, dataset[['CNB']]$LENGTH_KB))
colnames(dataset[['CNB']]) = c("barcode", "LENGTH_KB")
dataset[['CNB']]$barcode = unlist(lapply(dataset[['CNB']]$barcode, function(x) substr(x, 1, 12) ))
print(paste0('[CNB] ', dim(dataset[['CNB']])[1], ' complete rows found in clinical data.'))
########################################################################
#                      mRNA-seq
########################################################################
RNAseq.origin = read.table("LUAD/mRNAseq/gdac.broadinstitute.org_LUAD.Merge_rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes_normalized__data.Level_3.2016012800.0.0/LUAD.rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes_normalized__data.data.txt",
sep = "\t", header = T, row.names = 1)
RNAseq = RNAseq.origin[2:dim(RNAseq.origin)[1],]
# only keep primary cancer patients
RNAseq = RNAseq[, as.numeric(substr(colnames(RNAseq), 14, 15)) < 10]
coln = gsub(".", '-', substr(colnames(RNAseq), 1, 12), fixed = T)
rown = rownames(RNAseq)
RNAseq = as.data.frame(matrix(as.numeric(as.matrix(RNAseq)), nrow = dim(RNAseq)[1], byrow = F))
colnames(RNAseq) = coln
rownames(RNAseq) = rown
# convert na to 0
RNAseq[is.na(RNAseq)] <- 0
RNAseq.filtered = fastFilter(RNAseq, lowest_percentile_mean = 0.2,
lowest_percentile_variance = 0.2, var.func = "var")
## Remove duplicated gene symbols (only keep with max expression)
uniGene = gsub("\\|.*$","", rownames(RNAseq.filtered))
row2remove <- numeric()
finalSymCharTable <- table(uniGene)
for (i in 1:length(finalSymCharTable)){
if (as.numeric(finalSymCharTable[i]) > 1){ # if exist duplicated Gene
genename <- names(finalSymCharTable[i])
idx_with_max_mean <- which.max(rowMeans(RNAseq.filtered[which(uniGene == genename),]))
# print(idx_with_max_mean)
row2remove <- c( row2remove, (which(uniGene == genename)[-idx_with_max_mean]) )
}
}
if (length(row2remove) > 0){ # Otherwise numerical(0) will remove all data in tmpExp
RNAseq.filtered <- RNAseq.filtered[-row2remove,]
uniGene <- uniGene[-row2remove]
}
#Remove gene symbol after vertical line: from ABC|123 to ABC:
rownames(RNAseq.filtered) <- gsub("\\|.*$","", rownames(RNAseq.filtered))
print(paste('perform log2 transform on RNAseq with shape', dim(RNAseq.filtered)[1], 'x', dim(RNAseq.filtered)[2]))
RNAseq.filtered = log2(RNAseq.filtered+1)
dataset[['mRNAseq']] = RNAseq.filtered
########################################################################
#                      miRNA-seq
########################################################################
miRNAseq = read.table("LUAD/miRNAseq/gdac.broadinstitute.org_LUAD.Merge_mirnaseq__illuminahiseq_mirnaseq__bcgsc_ca__Level_3__miR_gene_expression__data.Level_3.2016012800.0.0/LUAD.mirnaseq__illuminahiseq_mirnaseq__bcgsc_ca__Level_3__miR_gene_expression__data.data.txt",
sep = "\t", header = T, row.names = 1)
miRNAseq = miRNAseq[,miRNAseq[1,] == "reads_per_million_miRNA_mapped"]
miRNAseq = miRNAseq[2:dim(miRNAseq)[1],]
# only keep primary cancer patients
miRNAseq = miRNAseq[, as.numeric(substr(colnames(miRNAseq), 14, 15)) < 10]
coln = gsub(".", '-', substr(colnames(miRNAseq), 1, 12), fixed = T)
rown = rownames(miRNAseq)
miRNAseq = as.data.frame(matrix(as.numeric(as.matrix(miRNAseq)), nrow = dim(miRNAseq)[1], byrow = F))
colnames(miRNAseq) = coln
rownames(miRNAseq) = rown
# convert na to 0
miRNAseq[is.na(miRNAseq)] <- 0
miRNAseq.filtered = fastFilter(miRNAseq, lowest_percentile_mean = 0.2,
lowest_percentile_variance = 0.2, var.func = "var")
## Remove duplicated gene symbols (only keep with max expression)
uniGene = gsub("\\|.*$","", rownames(miRNAseq.filtered))
row2remove <- numeric()
finalSymCharTable <- table(uniGene)
for (i in 1:length(finalSymCharTable)){
if (as.numeric(finalSymCharTable[i]) > 1){ # if exist duplicated Gene
genename <- names(finalSymCharTable[i])
idx_with_max_mean <- which.max(rowMeans(miRNAseq.filtered[which(uniGene == genename),]))
# print(idx_with_max_mean)
row2remove <- c( row2remove, (which(uniGene == genename)[-idx_with_max_mean]) )
}
}
if (length(row2remove) > 0){ # Otherwise numerical(0) will remove all data in tmpExp
miRNAseq.filtered <- miRNAseq.filtered[-row2remove,]
uniGene <- uniGene[-row2remove]
}
#Remove gene symbol after vertical line: from ABC|123 to ABC:
rownames(miRNAseq.filtered) <- gsub("\\|.*$","", rownames(miRNAseq.filtered))
print(paste('perform log2 transform on miRNAseq with shape', dim(miRNAseq.filtered)[1], 'x', dim(miRNAseq.filtered)[2]))
miRNAseq.filtered = log2(miRNAseq.filtered+1)
dataset[['miRNAseq']] = miRNAseq.filtered
########################################################################
#                      mRNA-seq / miRNA-seq co-expression
########################################################################
lmQCM_object <- lmQCM(dataset[['mRNAseq']], gamma = 0.7, t = 1, lambda = 1, beta = 0.4,
minClusterSize = 10, CCmethod = "spearman", normalization = F)
dataset[['mRNAseq_eigengene_matrix']] = t(lmQCM_object@eigengene.matrix)
lmQCM_object
lmQCM_object@clusters.names
clusters.names = lmQCM_object@clusters.names
clusters.names
summary(clusters.names)
getwd()
sink("output.txt")
print(clusters.names)
sink()
apply(clusters.names, paste)
for (i in 1:length(clusters.names)){
paste(clusters.names[i], collapse = ', ')
}
for (i in 1:length(clusters.names)){
clusters.names[i] = paste(clusters.names[i], collapse = ', ')
}
clusters.names
clusters.names = lmQCM_object@clusters.names
clusters.names[i]
unlist(clusters.names[i])
unlist(clusters.names[i])
paste(unlist(clusters.names[i]), collapse = ', ')
clusters.names = lmQCM_object@clusters.names
for (i in 1:length(clusters.names)){
clusters.names[i] = paste(unlist(clusters.names[i]), collapse = ', ')
}
clusters.names
unlist(clusters.names)
clusters.names = unlist(clusters.names)
clusters.names
clusters.names = lmQCM_object@clusters.names
for (i in 1:length(clusters.names)){
clusters.names[i] = paste(unlist(clusters.names[i]), collapse = ', ')
}
data.frame(clusters.names)
clusters.names
text.output = data.frame(row.names = 1:length(clusters.names))
text.output
clusters.names = lmQCM_object@clusters.names
text.output = data.frame(row.names = 1:length(clusters.names))
for (i in 1:length(clusters.names)){
text.output[i,1] = paste(unlist(clusters.names[i]), collapse = ', ')
}
text.output
View(text.output)
write.table(text.output, "LUAD/multiomics_preprocessing_results/mRNAseq_modules.csv")
write.csv(text.output, "LUAD/multiomics_preprocessing_results/mRNAseq_modules.csv")
